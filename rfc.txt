



Internet Engineering Task Force (IETF)                        A. Weidman
customRFC: 5111                                              M. Weitzman
Category: Informational                                            UPenn
ISSN: 2070-1721                                              10 May 2021


       Custom Protocol to Implement Server/Client Music Streaming

Abstract

   This document proposes a custom protocol to implement Server/Client
   music Ssreaming

Status of This Memo

   This document is not an Internet Standards Track specification; it is
   published for informational purposes.

   This document is a product of the Internet Engineering Task Force
   (IETF).  It represents the consensus of the IETF community.  It has
   received public review and has been approved for publication by the
   Internet Engineering Steering Group (IESG).  Not all documents
   approved by the IESG are candidates for any level of Internet
   Standard; see Section 2 of RFC 7841.

   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   https://www.rfc-editor.org/info/rfc5111.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Types of Messages
   3.  Message Format and Framing
     3.1.  Packet Format
     3.2.  Message transitions from server/client
   4.  State
     4.1.  State Stored by Server per-Client
     4.2.  Client states

1.  Introduction

   This is a protocol designed by Adam Weidman and Micah Weitzman in
   order to implement a music streaming server/client behavior that is
   outlined in hw6 of CIS553 (https://bitbucket.org/penncis553/553-
   hw6/src/master/setup/ (https://bitbucket.org/penncis553/553-
   hw6/src/master/setup/))

2.  Types of Messages

   *  list: The client will request the list of songs with: "list" or
      "l" at which point the server will respond by sending the list of
      songs currently stored by the dictionary.  Each will song be on
      its own line when received by the client with the number of the
      song before it.  This ordering is automatically stored in the
      dictionary on the server side.

   *  play [song number]: The client will request to play a song number
      with: "play *" or "p *", where * is a song number.  Must be space
      between the number and "p/play".  This will work even when the
      song number is multiple digits.  If this is a valid song number
      the server will open a new port from which the audio will be sent.
      This port number will be send to the client.

   *  stop: Client will request for the current song being played/sent
      to be stopped with "stop" or "s".  Once the server stops sending
      the song, music will stop, there is no message on the client end.

   *  quit: the client is disconnecting from the server

3.  Message Format and Framing

   *  The message issue by the client will be a string (one of those
      outlined in "types of messages").

   *  The music being sent will be sent in binary (similar to udp)

3.1.  Packet Format

   *  When the client requests the list of songs the header to the
      packet sent to the server will be the encoded character "l".
      Similarly the packet header for stop is encoded character "s", and
      for quit the header is "q".

   *  When the client requests a song the packet sent to the server the
      header will be "p" and then the song number, say "s", encoded as
      the header.

3.2.  Message transitions from server/client

   *  Server will keep track of which client is connected to which
      socket.

   *  Server will use the receive function to get packets sent from the
      client, with headers that correlate to the possible requests from
      the client which allow the server to understand what the specific
      client is requesting.

4.  State

4.1.  State Stored by Server per-Client

   *  The Server will store the socket used to currently stream music to
      each client.  In addition must keep track of sending audio to the
      correct client that requested it.

   *  The server maintains two threads per-client: one for reading/
      receiving from the client and one for sending to the client.

4.2.  Client states

   *  The server maintains the clients that are connected to it.

   *  Each client will maintain:

      -  the current song request and song number

      -  current command (i.e. stop, play _, quit, list)

      -  location in the current song being played

      -  socket

      -  And a variety of helpful variables to fascilate sending the
         list, a currently playing variable, and a quit varible

   *  When a new song is requested by the client from the server, it
      will (almost immediately) switch songs by resetting the location
      for the current song to 0, and changing the state stored of the
      song requested, corresponding song number, and other associated
      variables.
